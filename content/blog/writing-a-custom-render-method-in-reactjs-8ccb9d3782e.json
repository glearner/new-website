{
    "title": [
        "Writing a custom render method in Reactjs."
    ],
    "link": [
        "https://medium.com/@gkverma1094/writing-a-custom-render-method-in-reactjs-8ccb9d3782e?source=rss-445df3ce30f2------2"
    ],
    "guid": [
        {
            "_": "https://medium.com/p/8ccb9d3782e",
            "$": {
                "isPermaLink": "false"
            }
        }
    ],
    "category": [
        "react-native",
        "coding-interviews",
        "react-render",
        "javascript",
        "react"
    ],
    "dc:creator": [
        "Gaurav K. Verma"
    ],
    "pubDate": [
        "Sun, 08 Mar 2020 15:29:25 GMT"
    ],
    "atom:updated": [
        "2020-03-08T17:15:21.233Z"
    ],
    "content:encoded": [
        "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*mO5MIGY-R4jrDaplzAwP1A.png\" /></figure><p>This implementation of render just a demo, how render method is implemented. You can’t replace the real render method by this.</p><p>When I see all lifecycle methods in react and I always wondered how they’re implemented. So, I tried to implement my own custom render method.</p><p>Let’s see what a render method does in React.</p><p>Render method used to render a React element into the DOM in the supplied container and return a <a href=\"https://reactjs.org/docs/more-about-refs.html\">reference</a> to the component (or returns null for <a href=\"https://reactjs.org/docs/components-and-props.html#function-and-class-components\">stateless components</a>).</p><pre>ReactDOM.render(element, container[, callback])</pre><p>From the above declaration, I know the render method takes 2 arguments, element whom I want to render and container which is previously rendered element or basically its parent.</p><p>Let’s set up the project by running a create-react-app command.</p><pre>npx create-react-app my-app<br>cd my-app<br>npm start</pre><p>Now, I have to remove the default render method from <strong>Index.js </strong>and adding my own render method.</p><pre>import React from &#39;react&#39;;<br><em>// import ReactDOM from &#39;react-dom&#39;;<br></em>import ReactDomMini from &#39;./ReactDomMin&#39;;<br>import &#39;./index.css&#39;;<br>import App from &#39;./App&#39;;<br>import * as serviceWorker from &#39;./serviceWorker&#39;;<br>ReactDomMini.render(&lt;App /&gt;, document.getElementById(&#39;root&#39;));<br>serviceWorker.unregister();</pre><p>Now create a new file in the <strong>src</strong> folder, named RectDomMin. Now, we going to add one npm library which helps us for reconciliation. React-reconciler provides a declarative API so that you don’t have to worry about exactly what changes on every update.</p><pre>npm i react-reconciler</pre><p>Now, I added the react-reconciler for accessing some important methods. Adding import in ReactDomMin.js.</p><pre>import ReactReconciler from &#39;react-reconciler&#39;;</pre><p>Our render method looks like this.</p><pre>let ReactDomMini = {<br>render(whatToRender,div){<br>let container = reconciler.createContainer(div,false,false);<em> <br>//first false for concurrent and second false for hydration<br></em>reconciler.updateContainer(whatToRender,container,null,null)<br>},<br>};</pre><p>Our reconciler method will look like this.</p><pre>let reconciler = ReactReconciler({})</pre><p>Now, start passing methods to the ReactReconciler.</p><p><strong>createInstance</strong>, is a method that takes your element and converts the instance which we can add up to our parent tree (made by react).</p><pre>createInstance(type,props,rootContainerInstance,hostContext, internalInstanceHandle,)</pre><p>So, let see the arguments of the above method:-</p><ol><li><strong>type: </strong>what type of element is passed. Like h1, p, etc.</li></ol><p><strong>2. props</strong>: props basically contains the properties of elements like alt, href, etc.</p><p><strong>3. rootContainerInstance: </strong>root parent of the element or instance.</p><p><strong>4. hostContext</strong>: basically contains the access of passed context to the element from its parent.</p><p><strong>5. internalInstanceHandle</strong>: returns obj which is a type of React fiber node. So it can add to virtual dom. React fiber node basically contains state property, listeners and access of other variables which needed for reconciliation.</p><p>So, now we have to create an element with the help of <strong>document.create().</strong></p><pre>let el = document.createElement(type);</pre><p>Now, with the help of props, we going to map properties from props.</p><pre>if (props.className) el.className = props.className;<br>if (props.src) el.src = props.src;<br>if (props.bgColor){<br>el.style.backgroundColor = props.bgColor;<br>}</pre><p>Now, we loop through the list of properties to map the props to the created instance.</p><pre><em>//tags of react element(dom element)</em></pre><pre>[&#39;alt&#39;,&#39;className&#39;,&#39;href&#39;,&#39;rel&#39;,&#39;src&#39;,&#39;target&#39;].forEach(k=&gt;{<br>if(props[k]) el[k] = props[k];<br>});</pre><p>Now, we want to add an event listener to the created instance.</p><pre>if(props.onClick){<br> el.addEventListener(&#39;click&#39;,props.onClick);<br>}</pre><p>So, now my createInstance method looks like below :</p><pre>createInstance(type,props,rootContainerInstance,hostContext, internalInstanceHandle,){<br>let el = document.createElement(type);<br>if (props.className) el.className = props.className;<br>if (props.src) el.src = props.src;<br>if (props.bgColor){<br>el.style.backgroundColor = props.bgColor;<br>}<br><em>//tags of react element(dom element)</em>[&#39;alt&#39;,&#39;className&#39;,&#39;href&#39;,&#39;rel&#39;,&#39;src&#39;,&#39;target&#39;].forEach(k=&gt;{<br>if(props[k]) el[k] = props[k];<br>});<br>if(props.onClick){<br>el.addEventListener(&#39;click&#39;,props.onClick);<br>}<br>return el;<br>},</pre><p><strong>createTextInstance, </strong>is a method to create an instance of the text node because reactjs handle those element separately which enable us for injecting dynamic text in the tags.</p><pre>createTextInstance(text,rootContainerInstance,hostContext,internalInstanceHandle){<br> return document.createTextNode(text);<br>}</pre><p><strong>appendChildToContainer, </strong>is a method to append the child node or instance to the react parent container. It takes 2 parameters one is container (parent container) and child (which we going to append).</p><pre>appendChildToContainer(container,child){<br>  container.appendChild(child)<br>}</pre><p><strong>appendInitialChild</strong>, is a method to create and initialize the root node or instance.</p><pre>appendInitialChild(parent,child){<br>  parent.appendChild(child)<br>}</pre><p><strong>removeChildFromContainer, </strong>is a method to remove the child from the container(react-dom tree).</p><pre>removeChildFromContainer(container,child){<br>   container.removeChild(child)<br>}</pre><p><strong>removeChild, </strong>is a method of react-reconciler, is a method to remove the child from dom.</p><pre>removeChild(parent,child){<br>   parent.removeChild(child)<br>}</pre><p>We have to also need to pass the default parameters, like commitUpdate, finalizeInitialChildren, getChildHostContext, etc.</p><p>So implementing these methods, our RectDomMin.js file looks like this.</p><pre>import ReactReconciler from &#39;react-reconciler&#39;;<br>let reconciler = ReactReconciler({<br>supportsMutation : true,<br>createInstance(type,props,rootContainerInstance,hostContext, internalInstanceHandle,){<br>let el = document.createElement(type);<br>if (props.className) el.className = props.className;<br>if (props.src) el.src = props.src;<br>if (props.bgColor){<br>el.style.backgroundColor = props.bgColor;<br>}<br><em>//tags of react element(dom element)</em>[&#39;alt&#39;,&#39;className&#39;,&#39;href&#39;,&#39;rel&#39;,&#39;src&#39;,&#39;target&#39;].forEach(k=&gt;{<br>if(props[k]) el[k] = props[k];<br>});<br>if(props.onClick){<br>el.addEventListener(&#39;click&#39;,props.onClick);<br>}<br>return el;<br>},</pre><pre>createTextInstance(text,rootContainerInstance,hostContext,internalInstanceHandle){<br>console.log(text)<br>return document.createTextNode(text);<br>},</pre><pre>appendChildToContainer(container,child){<br>container.appendChild(child)<br>},</pre><pre>appendInitialChild(parent,child){<br>parent.appendChild(child)<br>},<br>commitUpdate(instance,updatePayload,type,oldProps,newProps,finishedWork){},<br>finalizeInitialChildren(){},<br>getChildHostContext(){},<br>getPublicInstance(){},<br>getRootHostContext(){},<br>prepareForCommit(){},<br>resetAfterCommit(){},<br>shouldSetTextContent(){<br>     return false<br>},<br>removeChildFromContainer(container,child){<br>container.removeChild(child)<br>},<br>removeChild(parent,child){<br>parent.removeChild(child)<br>},<br>insertInContainerBefore(container,child,before){<br>container.insertBefore(child,before)<br>},<br>insertBefore(parent,child,before){<br>parent.insertBefore(child,before)<br>},</pre><pre>prepareUpdate(instance,type,oldProps,newProps,rootContainerInstance,currentHostContainer){<br>let payload;<br>if(oldProps.bgColor !== newProps.bgColor){<br>    payload = { newBgColor: newProps.bgColor}<br>}<br>return payload<br>},<br>commitUpdate(instance,updatePayload,type,oldProps,newProps,finishedWork){<br>if(updatePayload.newBgColor){<br>instance.style.backgroundColor = updatePayload.newBgColor;<br>}<br>}<br>});</pre><pre>let ReactDomMini = {<br>render(whatToRender,div){<br>let container = reconciler.createContainer(div,false,false);<em> <br>//first false for concurrent and second false for hydration<br></em>reconciler.updateContainer(whatToRender,container,null,null)<br>},<br>};</pre><pre>export default ReactDomMini;</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*zg2rr5pL6RXgahdOxHW3yw.gif\" /></figure><p>If, you want to clone, please go to my <a href=\"https://github.com/glearner/React-Render\">GitHub</a> repo.</p><p>Please give a clap if you like the post.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=8ccb9d3782e\" width=\"1\" height=\"1\" alt=\"\">"
    ]
}